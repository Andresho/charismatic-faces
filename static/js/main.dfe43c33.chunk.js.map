{"version":3,"sources":["charismaticFace.png","Drawing.js","ShowFaces.js","About.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","defineMaxY","drawing","yPoints","reduce","a","b","concat","Object","toConsumableArray","Math","max","apply","createPath","s","i","openness","l","line","x","d","y","curve","curveBasis","points","forEach","push","react_default","createElement","key","Drawing","_ref","rightEye","leftEye","mouth","eyesOpenness","onClick","_useState","useState","_useState2","slicedToArray","maxRightEye","setMaxRightEye","_useState3","_useState4","maxLeftEye","setMaxLeftEye","_useState5","_useState6","maxMouth","setMaxMouth","useEffect","biggerEyeY","rightY","leftY","style","height","width","viewBox","stroke","fill","strokeWidth","transform","map","MainDiv","styled","div","_templateObject","Action","_templateObject2","props","top","Face","_templateObject3","ShowFaces","setMouth","setRightEye","setLeftEye","_useState7","_useState8","setEyesOpenness","changeFace","leftNumber","floor","random","eyes","length","rightNumber","mouthNumber","mouths","blinkDown","currentValue","newValue","window","setTimeout","blinkUp","nextBlinkTime","src_Drawing","react_router_dom","to","color","textDecoration","Container","About_templateObject","IconImage","About_templateObject2","charismaticFace","Title","h1","About_templateObject3","Paragraph","_templateObject4","About","App_templateObject","App","basename","process","App_MainDiv","react_router","path","exact","component","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dfe43c33.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/charismaticFace.2b9ec602.png\";","import React, { useState, useEffect } from 'react';\r\nimport {line, curveBasis} from 'd3';\r\n\r\nfunction defineMaxY(drawing){\r\n\tconst yPoints = drawing.reduce( (a,b)=>[...a, ...b[1]], []);\r\n\treturn Math.max(...yPoints);\r\n}\r\nfunction createPath(s, i, openness){\r\n\tconst l =  line()\r\n\t\t.x((d) => d.x )\r\n\t\t.y((d) => d.y*openness)\r\n\t\t.curve(curveBasis)\r\n\r\n\tconst points = [];\r\n\ts[0].forEach((x,i) => {\r\n\t\tpoints.push({x: x, y: s[1][i] })\r\n\t})\r\n\r\n\treturn (\r\n\t\t<path d={l(points)} key={i}/>\r\n\t)\r\n}\r\n\r\nfunction Drawing({rightEye,leftEye, mouth, eyesOpenness, onClick}){\r\n\tconst [maxRightEye, setMaxRightEye] = \tuseState(0);\r\n\tconst [maxLeftEye, setMaxLeftEye] = \tuseState(0);\r\n\tconst [maxMouth, setMaxMouth] = \t\tuseState(0);\r\n\r\n\tuseEffect(()=>{\r\n\t\tsetMaxRightEye\t( \tdefineMaxY(rightEye.drawing) \t);\r\n\t\tsetMaxLeftEye\t( \tdefineMaxY(leftEye.drawing) \t);\r\n\t\tsetMaxMouth\t\t( \tdefineMaxY(mouth.drawing) \t\t);\r\n\t}, [rightEye, leftEye, mouth]);\r\n\r\n\tconst eyesDistance = 5;\r\n\tconst mouthDistance = 5;\r\n\tconst biggerEyeY = Math.max(maxRightEye, maxLeftEye)\r\n\r\n\tconst rightCentralization = (biggerEyeY-maxRightEye)/2;\r\n\tconst leftCentralization  = (biggerEyeY-maxLeftEye)/2;\r\n\r\n\tconst rightOpenness = maxRightEye*(1-eyesOpenness)/2;\r\n\tconst leftOpenness  = maxLeftEye*(1-eyesOpenness)/2;\r\n\r\n\tconst rightY = rightCentralization + rightOpenness;\r\n\tconst leftY  = leftCentralization  + leftOpenness;\r\n\r\n\treturn (\r\n\t\t<svg\r\n\t\t\tstyle={{height: '100%', width: '100%'}}\r\n\t\t\tviewBox={`0 0 ${255*2+eyesDistance} ${biggerEyeY+maxMouth+mouthDistance}`} \r\n\t\t\tonClick={onClick}\r\n\t\t>\r\n\t\t   <g stroke=\"white\" fill=\"none\" strokeWidth={2} transform={`translate(0, ${rightY})`}>\r\n\t\t\t\t{rightEye.drawing.map((s, i)=>createPath(s, i, eyesOpenness))}\r\n\t\t\t</g>\r\n\t\t\t<g stroke=\"white\" fill=\"none\" strokeWidth={2} transform={`translate(${255+eyesDistance}, ${leftY})`}>\r\n\t\t\t\t{leftEye.drawing.map((s, i)=>createPath(s, i, eyesOpenness))}\r\n\t\t\t</g>\r\n\t\t\t<g stroke=\"white\" fill=\"none\" strokeWidth={2} transform={`translate(${255/2},${biggerEyeY+mouthDistance})`}>\r\n\t\t\t\t{mouth.drawing.map((s, i)=>createPath(s, i, 1))}\r\n\t\t\t</g>\r\n\t\t</svg>\r\n\t)\r\n}\r\n\r\nexport default Drawing;","import React, { useState, useEffect } from 'react';\r\n// import Face from './Face';\r\nimport styled from 'styled-components';\r\nimport Drawing from './Drawing';\r\n\r\nimport eyes from './eyes.json';\r\nimport mouths from './mouths.json';\r\n\r\nimport {\r\n  Link,\r\n} from \"react-router-dom\";\r\n\r\n\r\nconst MainDiv = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 100%;\r\n  height: 100%;\r\n\r\n`;\r\n\r\nconst Action = styled.div`\r\n  position: absolute;\r\n  top: ${props=>props.top};\r\n  cursor: pointer;\r\n  user-select: none;\r\n  @media (max-width: 600px) {\r\n      font-size: 1.2em;\r\n  }\r\n  @media (min-width: 600px) {\r\n    font-size: 0.9em;\r\n  }\r\n  @media (min-width: 1000px) {\r\n    font-size: 0.5em;\r\n  }\r\n`;\r\nconst Face = styled.div`\r\n  width: 60%; \r\n  height: 60%;\r\n  @media (max-width: 600px) {\r\n    width: 75%;\r\n    height: 75%;\r\n  }\r\n`;\r\n\r\nfunction ShowFaces() {\r\n  const [mouth, setMouth] =               useState(null);\r\n  const [rightEye, setRightEye] =         useState(null);\r\n  const [leftEye, setLeftEye] =           useState(null);\r\n  const [eyesOpenness, setEyesOpenness] = useState(1);\r\n\r\n  function changeFace(){  \r\n    const leftNumber =  Math.floor(Math.random()*eyes.length);\r\n    const rightNumber = Math.floor(Math.random()*eyes.length);\r\n    const mouthNumber = Math.floor(Math.random()*mouths.length);\r\n\r\n    setMouth( mouths[mouthNumber] );\r\n    setRightEye( eyes[rightNumber] );\r\n    setLeftEye( eyes[leftNumber] );\r\n  }\r\n\r\n  function blinkDown() {\r\n    const fn = currentValue=>{\r\n      const newValue = currentValue - 0.1;\r\n      if(newValue>0)      window.setTimeout(blinkDown, 10);\r\n      else                window.setTimeout(blinkUp, 10);\r\n      \r\n      return newValue;\r\n    }\r\n\r\n    setEyesOpenness(fn);\r\n  }\r\n  function blinkUp() {\r\n    const fn = currentValue=>{\r\n      const newValue = currentValue + 0.1;\r\n      if(newValue<1)      window.setTimeout(blinkUp, 10);\r\n      else {\r\n        const nextBlinkTime = Math.random()*3750+750;\r\n        window.setTimeout(blinkDown, nextBlinkTime);\r\n      }\r\n      \r\n      return newValue;\r\n    }\r\n\r\n    setEyesOpenness(fn);\r\n  }\r\n\r\n  useEffect(()=>{\r\n    changeFace();\r\n    const nextBlinkTime = Math.random()*3750+750;\r\n    window.setTimeout(blinkDown, nextBlinkTime);\r\n  },[]);\r\n\r\n  return (\r\n    <MainDiv>\r\n      <Action top={'5%'}>\r\n        Click to create a new random face!\r\n      </Action>\r\n      {\r\n        mouth&&\r\n     \r\n          <Face>\r\n            <Drawing rightEye={rightEye} leftEye={leftEye} mouth={mouth} eyesOpenness={eyesOpenness} onClick={changeFace}/>\r\n          </Face>\r\n      }\r\n      \r\n        <Action top={'95%'}>\r\n          <Link to={'/about'} style={{color: 'white', textDecoration: 'none',}}> \r\n            About\r\n          </Link>\r\n        </Action> \r\n      \r\n    </MainDiv>\r\n  );\r\n}\r\n\r\nexport default ShowFaces;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport charismaticFace from './charismaticFace.png';\r\n\r\nconst Container = styled.div`\r\n\tmargin: 0 auto;\r\n\tpadding-bottom: 30px;\r\n\t@media (max-width: 600px) {\r\n    \twidth: 100%;  \r\n    }\r\n    @media (min-width: 600px) { \r\n    \twidth: 75%; \r\n    }\r\n    @media (min-width: 1000px) { \r\n    \twidth: 50%; \r\n    }\r\n`;\r\nconst IconImage = styled.div`\r\n\tbackground: black; \r\n\tbackground-image: url(${charismaticFace});\r\n\tbackground-size: 90%;\r\n\tbackground-position: center;\r\n\tbackground-repeat: no-repeat;\r\n\tmargin: 0 auto;\r\n\tborder-radius: 50%;\r\n\tborder: solid 1px #88001B;\r\n\t@media (max-width: 600px) {\r\n    \theight: 8em; \r\n\t\twidth: 8em; \r\n    }\r\n    @media (min-width: 600px) {\r\n    \theight: 5em; \r\n\t\twidth: 5em;\r\n    }\r\n    @media (min-width: 1000px) {\r\n    \theight: 3em; \r\n\t\twidth: 3em;\r\n    }\r\n`;\r\nconst Title = styled.h1`\r\n\tcolor: white; \r\n\ttext-align: center;\r\n\r\n\t@media (max-width: 600px) {\r\n    \tfont-size: 3em; \r\n    }\r\n    @media (min-width: 600px) {\r\n    \tfont-size: 2em; \r\n    }\r\n    @media (min-width: 1000px) {\r\n    \tfont-size: 1em; \r\n    }\r\n`;\r\nconst Paragraph = styled.p`\r\n\tcolor: white; \r\n\t\r\n\ttext-align: justify;\r\n\t@media (max-width: 600px) {\r\n    \tfont-size: 1.2em;\r\n    }\r\n    @media (min-width: 600px) {\r\n    \tfont-size: 1em; \r\n    }\r\n    @media (min-width: 1000px) {\r\n    \tfont-size: 0.5em; \r\n    }\r\n`;\r\n\r\n\r\nconst About = () => {\r\n\treturn (\r\n\t\t<Container> \r\n\t\t\t<IconImage />\r\n\t\t\t<Title> Charismatic Faces </Title>\r\n\t\t\t\r\n\t\t\t<Paragraph>\r\n\t\t\t\tCharismatic Faces is a project created with the \"Quick, draw!\" game dataset, where each \r\n\t\t\t\tdrawing was made by a different person.\r\n\t\t\t</Paragraph>\r\n\t\t\t<Paragraph>\r\n\t\t\t\tIt's made with React and d3\r\n\t\t\t</Paragraph>\r\n\t\t</Container>\r\n\t)\r\n}\r\n\r\nexport default About;","import React from 'react';\r\nimport ShowFaces from './ShowFaces';\r\nimport About from './About';\r\n\r\nimport styled from 'styled-components';\r\n\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route,\r\n  Switch,\r\n} from \"react-router-dom\";\r\n\r\n\r\nconst MainDiv = styled.div`\r\n\tdisplay: flex;\r\n\tjustify-content: center;\r\n\theight: 100%;\r\n\twidth: 100%;\r\n\t@media (max-width: 650px) {\r\n\t\tpadding: 3em;\r\n    }\r\n    @media (min-width: 650px) {\r\n\t\tpadding: 1.25em;\r\n    }\r\n`;\r\n\r\nfunction App(){\r\n\treturn (\r\n\t\t<Router basename={process.env.PUBLIC_URL}>\r\n\t\t\t<MainDiv>\r\n\t\t\t\t<Switch>\r\n\t\t\t\t\t<Route path=\"/\" exact component={ShowFaces} />\r\n\t\t\t\t\t<Route path='/about' component={About} />\r\n\t\t\t\t</Switch>\r\n\t\t\t</MainDiv>\r\n\t\t</Router>\r\n\t)\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}